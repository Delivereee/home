import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useCart } from '../contexts/CartContext';
import { useAddress } from '../contexts/AddressContext';
import BackHeader from '../components/BackHeader';
import { PayPalScriptProvider, PayPalButtons } from "@paypal/react-paypal-js";
import apiClient from '../api/config';
import useTranslation from '../hooks/useTranslation';

const CheckoutPage: React.FC = () => {
  const navigate = useNavigate();
  const { cart, getTotalPrice } = useCart();
  const { isAddressSet } = useAddress();
  const { t } = useTranslation();
  
  // Email state management
  const [email, setEmail] = useState('');
  const [emailValid, setEmailValid] = useState(false);
  
  // Delivery request state management
  const [deliveryRequest, setDeliveryRequest] = useState<string | null>(null);
  
  // Terms expansion state
  const [termsExpanded, setTermsExpanded] = useState(false);
  
  // Payment processing state
  const [isProcessing, setIsProcessing] = useState(false);
  const [paymentError, setPaymentError] = useState<string | null>(null);
  
  // 컴포넌트 마운트 시 주소 설정 여부 확인
  useEffect(() => {
    if (!isAddressSet()) {
      // 주소가 설정되지 않았으면 바로 주소 페이지로 리다이렉션
      navigate('/address');
    }
  }, [isAddressSet, navigate]);
  
  // PayPal initial options
  const getPayPalClientId = () => {
    // 환경변수에서 Client ID 가져오기
    if (process.env.REACT_APP_PAYPAL_CLIENT_ID) {
      return process.env.REACT_APP_PAYPAL_CLIENT_ID;
    }
    
    // GitHub Pages 환경 감지
    const isGitHubPages = typeof window !== 'undefined' && window.location.hostname.includes('github.io');
    
    // 환경에 따른 Client ID 설정
    return isGitHubPages
      ? "Af62TVjm80kRjCCyhj-EUa-fUjLoyWc8lbYyTvrVH8qdRetwc2Dk9sT4gxvCrKFBONJMB1fHnJYW0nYg" // 운영용
      : "AWiQrkfr-umMAIIyeiLWY_Dgx3PMSazp9iUDofAQeNeIUnZo8sZuzDZPCdHJEqM9BYIE99g8DgzLI7a6"; // 개발용
  };
  
  const paypalOptions = {
    clientId: getPayPalClientId(),
    currency: "USD",
    intent: "capture",
    locale: "en_US",
  };
  
  // 개발 환경에서만 페이팔 설정 로그
  if (process.env.NODE_ENV === 'development') {
    console.log('페이팔 설정 환경:', process.env.NODE_ENV);
    console.log('페이팔 Client ID:', getPayPalClientId());
  }
  
  // Currency conversion constant
  const EXCHANGE_RATE = 0.00071; // 1 KRW = 0.00071 USD
  
  // Delivery fee and service fee (hardcoded values)
  const DELIVERY_FEE = 3000 * EXCHANGE_RATE; // 3,000 KRW
  const PROXY_FEE = 1000 * EXCHANGE_RATE; // 1,000 KRW
  
  // Subtotal (cart items total)
  const subtotal = getTotalPrice();
  
  // Total order amount
  const total = subtotal + DELIVERY_FEE + PROXY_FEE;
  
  // Price formatting (USD)
  const formatPrice = (price: number) => {
    return `$${price.toFixed(2)}`;
  };
  
  // Email validation
  const validateEmail = (email: string) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };
  
  // Email input change handler
  const handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newEmail = e.target.value;
    setEmail(newEmail);
    setEmailValid(validateEmail(newEmail));
  };
  
  // Delivery request change handler
  const handleDeliveryRequestChange = (request: string) => {
    setDeliveryRequest(request === deliveryRequest ? null : request);
  };
  
  // Create PayPal order
  const createOrder = (data: any, actions: any) => {
    if (!emailValid || !cart) return;
    
    return actions.order.create({
      purchase_units: [{
        description: `Order from ${cart.restaurantName}`,
        amount: {
          currency_code: "USD",
          value: total.toFixed(2),
          breakdown: {
            item_total: {
              currency_code: "USD",
              value: subtotal.toFixed(2)
            },
            shipping: {
              currency_code: "USD",
              value: DELIVERY_FEE.toFixed(2)
            },
            handling: {
              currency_code: "USD",
              value: PROXY_FEE.toFixed(2)
            }
          }
        },
        items: cart.items.map(item => ({
          name: item.name,
          unit_amount: {
            currency_code: "USD",
            value: item.price.toFixed(2)
          },
          quantity: item.quantity
        }))
      }],
      application_context: {
        shipping_preference: "NO_SHIPPING"
      }
    });
  };
  
  // PayPal payment approval handler
  const onApprove = async (data: any, actions: any) => {
    if (!cart) return;
    
    setIsProcessing(true);
    setPaymentError(null);
    
    try {
      const orderDetails = await actions.order.capture();
      console.log('PayPal payment successful:', orderDetails);
      
      // Extract order ID (to be used in URL)
      const orderId = "voMwY10V"; // In production, this should be generated by the backend
      
      // Extract PayPal transaction ID
      const transactionId = orderDetails.purchase_units[0]?.payments?.captures[0]?.id || '';
      
      // Prepare backend API request body
      const requestBody = {
        paymentMethod: "PAYPAL",
        paymentDetails: {
          paypalOrderId: data.orderID,
          transactionId: transactionId,
          paymentStatus: "COMPLETED"
        },
        orderInfo: {
          email: email,
          items: cart.items.map(item => ({
            id: item.id,
            name: item.name,
            quantity: item.quantity,
            price: item.price
          })),
          subtotal: subtotal,
          deliveryFee: DELIVERY_FEE,
          proxyFee: PROXY_FEE,
          total: total,
          currency: "USD"
        },
        deliveryRequest: deliveryRequest || ""
      };
      
      try {
        // Call backend API using apiClient instead of fetch
        const response = await apiClient.post(
          `/api/orders/${orderId}/payment?paymentId=${data.orderID}`, 
          requestBody
        );
        
        if (response.status >= 200 && response.status < 300) {
          console.log('Order successfully processed:', response.data);
          
          // Navigate to success page
          navigate('/order-success', { 
            state: { 
              orderId: orderId,
              paymentId: data.orderID
            } 
          });
        } else {
          console.error('Failed to process order:', response.statusText);
          // Even if there's a backend communication error, payment was completed, so navigate to success page
          navigate('/order-success', { 
            state: { 
              orderId: orderId,
              paymentId: data.orderID
            } 
          });
        }
      } catch (error) {
        console.error('API error:', error);
        // Even if there's a backend API communication error, payment was completed, so navigate to success page
        navigate('/order-success', { 
          state: { 
            orderId: orderId,
            paymentId: data.orderID
          } 
        });
      }
      
    } catch (error) {
      console.error('PayPal payment error:', error);
      setPaymentError('An error occurred during payment processing. Please try again.');
    } finally {
      setIsProcessing(false);
    }
  };
  
  // Redirect to cart if cart is empty
  if (!cart || cart.items.length === 0) {
    navigate('/cart');
    return null;
  }
  
  return (
    <div className="min-h-screen bg-gray-50 pb-16">
      <BackHeader title={t('checkout.title')} />
      
      <main className="px-4 py-4 pb-32">
        <h1 className="text-xl font-bold text-gray-800 mb-4 text-left">Order Summary</h1>
        
        {/* Order information section */}
        <div className="bg-gray-100 rounded-lg p-4 mb-4">
          {/* Restaurant information */}
          <h2 className="text-base text-gray-500 mb-3 text-left">{cart.restaurantName}</h2>
          
          {/* Menu list */}
          <div className="space-y-3 mb-2">
            {cart.items.map(item => (
              <div key={item.id} className="flex justify-between">
                <div className="flex-1 flex flex-col">
                  <div className="flex items-start">
                    <span className="text-gray-600 mr-2">{item.quantity}×</span>
                    <span className="text-gray-800">{item.name}</span>
                  </div>
                  {/* 옵션 아이템 정보 추가 */}
                  {item.options.length > 0 && item.options.some(opt => opt.optionItems.length > 0) && (
                    <div className="ml-6 mt-1 text-xs text-gray-500 text-left">
                      {item.options
                        .filter(option => option.optionItems.length > 0)
                        .map((option, index, filteredOptions) => (
                          <span key={option.id} className="block">
                            {option.optionItems.map(optItem => optItem.name).join(', ')}
                            {index < filteredOptions.length - 1 ? '' : ''}
                          </span>
                        ))}
                    </div>
                  )}
                </div>
                <span className="text-gray-800 font-medium ml-4">
                  {formatPrice(item.price * item.quantity)}
                </span>
              </div>
            ))}
          </div>
        </div>
        
        {/* Payment summary information */}
        <div className="bg-gray-100 rounded-lg p-4 mb-6">
          <div className="space-y-3 mb-3">
            <div className="flex justify-between items-center">
              <p className="text-gray-600">Subtotal</p>
              <p className="font-medium text-gray-800">{formatPrice(subtotal)}</p>
            </div>
            
            <div className="flex justify-between items-center">
              <p className="text-gray-600">Delivery Fee</p>
              <p className="font-medium text-gray-800">{formatPrice(DELIVERY_FEE)}</p>
            </div>
            
            <div className="flex justify-between items-center">
              <p className="text-gray-600">Proxy Ordering Fee</p>
              <p className="font-medium text-gray-800">{formatPrice(PROXY_FEE)}</p>
            </div>
          </div>
          
          <div className="border-t border-gray-300 pt-3 flex justify-between items-center">
            <p className="font-medium text-lg text-gray-900">Total</p>
            <p className="font-semibold text-lg text-gray-900">{formatPrice(total)}</p>
          </div>
        </div>
        
        {/* Email input section */}
        <div className="mb-6">
          <label htmlFor="email" className="block text-gray-800 font-medium mb-2 text-left">
            Email <span className="text-red-500">*</span>
          </label>
          <input
            type="email"
            id="email"
            value={email}
            onChange={handleEmailChange}
            placeholder="Enter your email address"
            className={`w-full p-3 border rounded-lg focus:outline-none focus:ring-2 ${
              email && !emailValid 
                ? 'border-red-500 focus:ring-red-200' 
                : 'border-gray-300 focus:ring-blue-200'
            }`}
          />
          {email && !emailValid && (
            <p className="mt-1 text-sm text-red-500 text-left">Please enter a valid email address</p>
          )}
          <p className="mt-1 text-sm text-gray-500 text-left">Order confirmation will be sent to this email</p>
        </div>
        
        {/* Delivery requests section */}
        <div className="mb-6">
          <h2 className="text-xl font-bold text-gray-800 mb-3 text-left">Delivery Requests</h2>
          <div className="grid grid-cols-2 gap-3">
            <button
              type="button"
              onClick={() => handleDeliveryRequestChange('Please do not ring the bell')}
              className={`p-3 border rounded-lg text-left ${
                deliveryRequest === 'Please do not ring the bell' 
                  ? 'border-red-500 bg-red-50' 
                  : 'border-gray-300 hover:border-gray-400'
              }`}
            >
              Please do not ring the bell
            </button>
            
            <button
              type="button"
              onClick={() => handleDeliveryRequestChange('Leave at the door')}
              className={`p-3 border rounded-lg text-left ${
                deliveryRequest === 'Leave at the door' 
                  ? 'border-red-500 bg-red-50' 
                  : 'border-gray-300 hover:border-gray-400'
              }`}
            >
              Leave at the door
            </button>
            
            <button
              type="button"
              onClick={() => handleDeliveryRequestChange('Call me if there\'s a problem')}
              className={`p-3 border rounded-lg text-left ${
                deliveryRequest === 'Call me if there\'s a problem' 
                  ? 'border-red-500 bg-red-50' 
                  : 'border-gray-300 hover:border-gray-400'
              }`}
            >
              Call me if there's a problem
            </button>
            
            <button
              type="button"
              onClick={() => handleDeliveryRequestChange('I\'m staying at Room [#]')}
              className={`p-3 border rounded-lg text-left ${
                deliveryRequest === 'I\'m staying at Room [#]' 
                  ? 'border-red-500 bg-red-50' 
                  : 'border-gray-300 hover:border-gray-400'
              }`}
            >
              I'm staying at Room [#]
            </button>
            
            <button
              type="button"
              onClick={() => handleDeliveryRequestChange('Please add utensils')}
              className={`p-3 border rounded-lg text-left ${
                deliveryRequest === 'Please add utensils' 
                  ? 'border-red-500 bg-red-50' 
                  : 'border-gray-300 hover:border-gray-400'
              }`}
            >
              Please add utensils
            </button>
          </div>
        </div>
        
        {/* Payment method section */}
        <div className="mb-6">
          <h2 className="text-xl font-bold text-gray-800 mb-3 text-left">Payment Method</h2>
          
          <div className="p-4 bg-gray-50 rounded-lg border border-gray-200 mb-4">
            <p className="text-gray-700">Your payment will be securely processed by PayPal.</p>
            <p className="text-sm text-gray-500 mt-1">You can pay using a PayPal account or credit/debit card.</p>
          </div>
          
          {/* Display payment error if any */}
          {paymentError && (
            <div className="mt-2 p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm mb-4">
              {paymentError}
            </div>
          )}
          
          {/* PayPal button section */}
          {emailValid ? (
            <div className="mt-4">
              <PayPalScriptProvider options={paypalOptions}>
                <PayPalButtons 
                  style={{ layout: "vertical" }}
                  createOrder={createOrder}
                  onApprove={onApprove}
                  disabled={isProcessing}
                  onError={(err) => {
                    console.error('PayPal error:', err);
                    setPaymentError('An error occurred with PayPal. Please try again.');
                  }}
                />
              </PayPalScriptProvider>
              
              {isProcessing && (
                <div className="mt-3 text-center text-gray-600">
                  <p>Processing your payment. Please wait...</p>
                </div>
              )}
            </div>
          ) : (
            <div className="mt-4 p-4 bg-yellow-50 border border-yellow-100 rounded-lg text-center">
              <p className="text-yellow-700">Please enter a valid email address to access the PayPal payment button.</p>
            </div>
          )}
        </div>
        
        {/* Terms section */}
        <div className="mt-4 text-center text-gray-500 text-sm">
          <p className="mb-2">
            By proceeding with payment, 
            <button 
              type="button" 
              className="text-gray-700 font-medium inline-flex items-center ml-1"
              onClick={() => setTermsExpanded(!termsExpanded)}
            >
              you agree to our Privacy Policy and Terms
              <svg 
                xmlns="http://www.w3.org/2000/svg" 
                viewBox="0 0 24 24" 
                fill="currentColor" 
                className={`w-5 h-5 ml-1 transition-transform ${termsExpanded ? 'rotate-180' : ''}`}
              >
                <path d="M7 10l5 5 5-5z" />
              </svg>
            </button>
          </p>
          
          {termsExpanded && (
            <div className="mt-3 text-left bg-gray-50 p-4 rounded-lg border border-gray-200 text-xs leading-relaxed">
              <h3 className="font-bold mb-2 text-gray-700">Privacy Policy and Terms of Service</h3>
              <p className="mb-2">
                <strong>1. Collection of Personal Information:</strong> We collect personal information such as your name, email address, phone number, and delivery address to process your order and provide you with a seamless food delivery experience.
              </p>
              <p className="mb-2">
                <strong>2. Use of Information:</strong> The information we collect is used to process your orders, manage your account, provide customer support, and improve our services.
              </p>
              <p className="mb-2">
                <strong>3. Payment Information:</strong> Your payment information is processed securely through our payment partners. We do not store your full credit card details on our servers.
              </p>
              <p className="mb-2">
                <strong>4. Refund Policy:</strong> Refunds are processed according to our refund policy, which may vary depending on the restaurant and the circumstances of the refund request.
              </p>
              <p className="mb-2">
                <strong>5. Delivery Terms:</strong> Delivery times are estimates and may vary depending on factors such as traffic, weather conditions, and restaurant preparation times.
              </p>
              <p>
                By proceeding with payment, you acknowledge that you have read and agree to these terms and conditions.
              </p>
            </div>
          )}
        </div>
      </main>
    </div>
  );
};

export default CheckoutPage; 